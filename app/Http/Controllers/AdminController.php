<?phpnamespace App\Http\Controllers;use App\Http\Controllers\Controller;use App\Http\Requests\Auth\LoginRequest;use App\Providers\RouteServiceProvider;use Illuminate\Support\Facades\Validator;use Illuminate\Http\Request;use Illuminate\Support\Facades\Hash;use Illuminate\Support\Facades\Auth;use Tymon\JWTAuth\Facades\JWTAuth;use Tymon\JWTAuth\Exceptions\JWTException;use Illuminate\Validation\Rule;use App\Models\User;use App\Models\Contact;use App\Models\Post;use App\Models\DeleteAccountRequest;use App\Models\AssignUserGroup;use App\Models\BurialInfo;use App\Models\UserLiveStatus;use App\Models\FamilyMember;use App\Models\SubscribedPartner;use App\Models\MemberGroup;use App\Mail\UserSendRequestByAdmin;use App\Mail\DeleteAccountRequestSendAdmin;use Illuminate\Support\Facades\Storage;use Carbon\Carbon;use Illuminate\Pagination\LengthAwarePaginator;use Illuminate\Support\Collection;use App\Services\StripeService;use App\Models\Album;use App\Models\SchedulingPost;use App\Models\AddToCart;use App\Models\BlockUser;use App\Models\FamilyTagId;use App\Models\FQA;use App\Models\Tutorial;use App\Models\AboutUs;use App\Models\UserGroup;use App\Models\AdsPrice;use App\Models\Product;use App\Models\TransactionHistory;use App\Models\TrustedPartners;use App\Models\FeaturedCompanyPrice;use App\Models\SubscriptionSetting;use App\Models\Subscription;use App\Models\StickerPurchase;use App\Models\Advertisement;use App\Mail\SendMailOrderReceived;use App\Mail\SendMailOrderSend;use Illuminate\Support\Facades\DB;use Illuminate\Support\Facades\Mail;use App\Traits\OneSignalTrait;use App\Services\UploadImage;use Illuminate\Support\Facades\Log;class AdminController extends Controller{    use OneSignalTrait;            protected $StripeService;    protected $storageClient;        public function __construct(StripeService $StripeService,UploadImage $UploadImage)    {                $this->StripeService = $StripeService;        $this->UploadImage = $UploadImage;    }             public function getDeleteRequestUser(){        $getdeleteUser = DeleteAccountRequest::where('status','0')->orderBy('id','desc')->get();        return view('admin.deleteUserRequest', compact('getdeleteUser'));    }    public function getUsers(){       return view('admin.user.index');   }       public function getUserList(Request $request) {        $search = $request->input('search'); // Get search term from request        $usersQuery = User::withTrashed()->where('role_id', '<>', 1)->with('subscription')->orderBy('created_at', 'desc');            if ($search) {            $searchTerm = '%' . $search . '%';            $usersQuery->where(function($query) use ($searchTerm) {                $query->where('first_name', 'like', $searchTerm)->orWhere('last_name', 'like', $searchTerm)->orWhere('email', 'like', $searchTerm);            });        }            $users = $usersQuery->paginate(7);            if ($users) {            return response()->json(['status' => 200,'message' => 'Get user successfully.','data' => $users]);        } else {            return response()->json([ 'status' => 404,'message' => 'User not found.', 'data' => null]);        }    }          public function getContactUs(){    $contacts = Contact::orderBy('created_at','desc')->get();    $contactCount = Contact::count();     return view('admin.contact',compact("contacts", 'contactCount'));          }    public function getOpenWorld(Request $request){        $sort_by = $request->input('sort_by', 'desc');        $posts = Post::where('post_type', 'public')                ->whereHas('scheduling_post', function ($query) {                    $query->where('is_post', 1);                })                ->whereHas('user', function ($query) {                    $query->whereNull('deleted_at');                })                ->join('scheduling_posts', 'posts.id', '=', 'scheduling_posts.post_id')                ->orderBy('scheduling_posts.schedule_date', $sort_by)                ->paginate(12);                return view('admin.openWorld', compact('posts'));    }       public function profile($id)    {        $user = User::find($id);        return view('admin.user.profile', compact('user'));    }       public function createUser(){       return view('admin.user.create');   }          public function viewUserDeatils(Request $request, $id)    {        $user = User::where('id', $id)->first();        $getBurial = BurialInfo::where('user_id', $id)->first();            // Get family members where the user is not soft-deleted        $familyMembers = FamilyMember::where('user_id', $id)            ->whereHas('user', function($query) {                $query->whereNull('deleted_at');            })->pluck('member_id');                                $familyUser = FamilyMember::where('member_id', $id)            ->whereHas('member', function($query) {                $query->whereNull('deleted_at');            })->pluck('user_id');                        $mergedGroups = $familyMembers->merge($familyUser);                $userInfo = User::whereIn('id',$mergedGroups)->get();        $userGroups = $userInfo->unique(function ($item) {            return optional($item)->id; // Safely access user ID        })->sortByDesc('id');                                    // Manually paginate the results        $perPage = ($userGroups->count() == 0) ? 1 : $userGroups->count();        $currentPage = LengthAwarePaginator::resolveCurrentPage();        $currentItems = $userGroups->slice(($currentPage - 1) * $perPage, $perPage)->all();        $paginatedUserGroups = new LengthAwarePaginator($currentItems, $userGroups->count(), $perPage, $currentPage, [            'path' => LengthAwarePaginator::resolveCurrentPath(),        ]);            $group = UserGroup::where('user_id', $id)            ->orderBy('id', 'desc')            ->get();            $blockUsers = BlockUser::where(['user_id' => $id, 'block' => 1])            ->whereHas('blockedUser', function($query) {                $query->whereNull('deleted_at'); // Exclude soft-deleted blocked users            })            ->orderBy('id', 'desc')            ->get();            return view('admin.user.view', compact('user', 'getBurial', 'paginatedUserGroups', 'group', 'blockUsers'));    }       public function viewAllPosts($id){        $posts = Post::where('user_id',$id)->orderBy('id','DESC')->paginate(12);        $user = User::where('id',$id)->first();        return view('admin.user.post',compact('posts','user'));    }          public function storeUser(Request $request)    {        $validator = Validator::make($request->all(), [            'first_name' => 'required|max:255',            'last_name' => 'required|max:255',            'email' => 'required|email|unique:users',            'password' => 'required',            'phone' => 'required',            'image' => 'nullable|image|mimes:jpeg,png,jpg,gif,svg|max:2048',        ]);            if ($validator->fails()) {            return back()                ->withErrors($validator)                ->withInput();        }               try {            // Create User            $user = new User;            $user->first_name = $request->first_name;            $user->last_name = $request->last_name;            $user->role_id = 2;             $user->email = $request->email;            $user->phone = $request->phone;            $user->password = Hash::make($request->password);            $user->save();            if ($request->hasFile('image')) {                            // Update user's image URL                $res = $this->UploadImage->saveMedia($request->file('image'),$user->id);                $user->image = $res;                $user->save(); // Save the updated user record            }                                    // Assign user to predefined groups            $groupIds = [1, 2];            foreach ($groupIds as $groupId) {                $addGroup = new AssignUserGroup;                $addGroup->user_id = $user->id;                $addGroup->user_group_id = $groupId;                $addGroup->is_notify = false;                $addGroup->save();            }                                    $album = new Album();            $album->album_name = "Saved Posts";            $album->user_id = $user->id;            $album->save();                        return redirect()->route('get-users')->with('success', 'User Created Successfully');        } catch (\Exception $e) {            return response()->json(['message' => $e->getMessage(), 'status' => 'failed', 'data' => []], 500);        }    }       public function editUser($id){       $user = User::find($id);       return view('admin.user.edit',compact('user'));    }       public function updateUser(Request $request,$id){                $user = User::find($id);        $validator = Validator::make($request->all(), [            'first_name' => 'required|max:255',            'last_name' => 'required|max:255',            'email' => ['nullable', 'email', Rule::unique('users')->ignore($user)],            // 'phone' => 'required',            'image' => 'nullable|image',        ]);        if ($validator->fails()) {            return back()->withErrors($validator)->withInput();        }       try {                $user->first_name = $request->first_name;        $user->last_name = $request->last_name;        if ($request->has('email')) {            $user->email = $request->email;        }        $user->phone = $request->phone;        if ($request->hasFile('image')) {            $res = $this->UploadImage->saveMedia($request->file('image'),$user->id);            $user->image = $res;       }              if($user->role_id == "1"){           if($request->password){               $user->password = Hash::make($request->password);           }       }        $user->save();        return redirect()->route('get-users')->with('success', 'User Updated Successfully');    } catch (\Exception $e) {        return response()->json(['message' => $e->getMessage(), 'status' => 'failed', 'data' => []], 500);    }   }       public function updateUserPassword(Request $request, $id){        //  $validator = Validator::make($request->all(), [        //     'lastPassword'=>'required',        // ]);        // if ($validator->fails()) {        //     return back()->withErrors($validator)->withInput();        // }            }        public function approveAdvertiser(Request $request){        $user = User::find($request->id);        $user->is_approved = $user->is_approved ? false : true;        $user->save();        if($user){            return response()->json(['status' => 200, 'message'=>'Status changed successfully']);        }             return response()->json(['status' => 404, 'message'=>'User not found .']);                }        public function destroyUser(Request $request){        try {            $id = $request->id;            if(gettype($id) === "array"){                foreach($id as $id){                    $userData = User::find($id);                     $data = new DeleteAccountRequest;                    $data->name = $userData->first_name;                    $data->email = $userData->email;                    $data->phone_number = null;                    $data->reason_for_deletion = "This account has been deleted by Admin.";                    $data->source = 'Admin';                    $data->user_id = $userData->id;                    $data->status = 1;                    $data->save();                                        $trustedPartner = TrustedPartners::where('created_by',$id)->where('featured_partner',1)->update(['cancel_status'=>1,'cancel_at' => Carbon::now()]);                                                            $userRole = User::where('id',$id)->update(['deleted_at' => Carbon::now()]);                }                                return response()->json(['status' => 200, 'message'=>'User deleted successfully.']);            }                        $userData = User::find($id);             $data = new DeleteAccountRequest;            $data->name = $userData->first_name;            $data->email = $userData->email;            $data->phone_number = null;            $data->reason_for_deletion = "This account has been deleted by Admin.";            $data->source = 'Admin';            $data->user_id = $userData->id;            $data->status = 1;            $data->save();                        $trustedPartner = TrustedPartners::where('created_by',$id)->where('featured_partner',1)->update(['cancel_status'=>1,'cancel_at' => Carbon::now()]);                                    $userRole = User::where('id',$id)->update(['deleted_at' => Carbon::now()]);                                                if($userData){                return response()->json(['status' => 200, 'message'=>'User deleted successfully.']);            } else {                return response()->json(['status' => 404, 'message'=>'User not found .']);            }        } catch (Exception $exception) {            return response()->json(['status' => 500, 'message'=>'Internal Server Error.']);        }  }    public function softDeleteUser(Request $request)    {        $id = $request->id;        try {                          if(gettype($id) === "array"){                                DeleteAccountRequest::whereIn('user_id', $id)->update(['status' => 1]);                User::whereIn('id', $id)->update(['deleted_at' => now()]);                TrustedPartners::whereIn('created_by',$id)->where('featured_partner',1)->update(['cancel_status'=>1,'cancel_at' => Carbon::now()]);                                foreach($id as $key => $id){                    \Log::warning('user_id: ' . $id);                    $user = User::find($id);                    if($user){                        $adminEmail = config('mail.admin_email'); // Replace with your method to retrieve admin's email                        $userEmail = $user->email;                    }                }                return redirect()->back()->with('success', 'User deleted successfully and cannot log in again.');                            }                                    // Find the user            $user = User::find($id);                       // Check if user exists            if (!$user) {                return redirect()->back()->with('error', 'User not found.');            }            $user->deleted_at = now();            $user->save();                // Update status in delete request table            DeleteAccountRequest::where('user_id', $user->id)->update(['status' => 1]);                        $trustedPartner = TrustedPartners::where('created_by',$user->id)->where('featured_partner',1)->update(['cancel_status'=>1,'cancel_at' => Carbon::now()]);                            // Invalidate sessions for the user            Auth::logoutOtherDevices($user->id);                // Send email notification to admin            $adminEmail = config('mail.admin_email'); // Replace with your method to retrieve admin's email                // Retrieve user's email for notification            $userEmail = $user->email;                // $data = [            //     'name' => $user->name,            //     'email' => $userEmail,            //     'reason' => $request->reason_for_deletion // Assuming this is the reason entered in the form            // ];                        // // Send email notification to admin            // Mail::to($adminEmail)->send(new ($data));                // Redirect back with success message            return redirect()->back()->with('success', 'User deleted successfully and cannot log in again.');        } catch (\Exception $e) {            // Handle any exceptions here            return redirect()->back()->with('error', 'Failed to delete user: ' . $e->getMessage());        }    }        public function rejectDeleteAccountRequest(Request $request){        try {              $ids = $request->ids;            DeleteAccountRequest::whereIn('user_id', $ids)->delete();            return redirect()->back()->with('success', 'Delete request rejected successfully.');                    } catch (\Exception $e) {            // Handle any exceptions here            return redirect()->back()->with('error', 'Failed to delete user: ' . $e->getMessage());        }    }                    public function famoryTags(Request $request){      $tags = FamilyTagId::with(['user','createdUser'])->orderBy('updated_at','desc')->get();       return view('admin.famory-tags',compact('tags'));    //  return view('admin.famory-tags');    }        public function getTagListing(Request $request){       $tagsQuery = FamilyTagId::with([            'user' => function($query) {                $query->whereNull('deleted_at'); // Fetch only users who are not soft deleted            },            'createdUser' => function($query) {                $query->whereNull('deleted_at'); // Fetch only createdUsers who are not soft deleted            }        ])->orderBy('updated_at', 'desc');                $tags = $tagsQuery->paginate(7);            if ($tags) {            return response()->json(['status' => 200,'message' => 'Get tag successfully.','data' => $tags]);        } else {            return response()->json([ 'status' => 404,'message' => 'Tag not found.', 'data' => null]);        }    }        public function editFamoryTag($id){        $tag = FamilyTagId::where('id',$id)->with('user')->first();        $users = $users = User::where('role_id','<>',1)->where('deleted_at', null)->orderBy('id', 'desc')->get();        return view('admin.FamoryTagsEdit',compact('tag','users'));     }            public function updateFamoryTag(Request $request,$id){        try {            $saveTag = FamilyTagId::find($id);            $saveTag->user_id = $request->user_id; // The created tag is assigned            $saveTag->save();                return redirect()->route('famory-tags')->with('success', 'Fomary Tags Assign any other Successfully');        } catch (\Exception $e) {            return response()->json(['message' => $e->getMessage(), 'status' => 'failed', 'data' => []], 500);        }   }       public function destroyFamoryTag(Request $request){        try {            $id = $request->id;            if(count($id) > 0){                FamilyTagId::whereIn('id',$id)->delete();                   return response()->json(['status' => 200, 'message'=>'Fomary Tags deleted successfully.']);            }            // FamilyTagId,            // if($tag){            //     $tag->delete();            //     return response()->json(['status' => 200, 'message'=>'Fomary Tags deleted successfully.']);            // } else {            //     return response()->json(['status' => 404, 'message'=>'Fomary Tags not found .']);            // }        } catch (Exception $exception) {            return response()->json(['status' => 500, 'message'=>'Internal Server Error.']);        }    }            public function fqa(Request $request){       $getFQAs = FQA::orderBy('id','desc')->get();       return view('admin.FQA.FQAList',compact('getFQAs'));    }        public function viewFQA(Request $request){       return view('admin.FQA.CreateFQA');    }       public function createFqa(Request $request){        try{            $validator = Validator::make($request->all(), [                'ques' => 'required',                'ans' => 'required',            ]);                    if ($validator->fails()) {                return back()->withErrors($validator)->withInput();            }            $save = new FQA;            $save->question = $request->ques;            $save->answer = $request->ans;            $save->save();                        if(!$save){                return redirect()->route('f-q-a')->with('error', 'F.Q.A is not saved');            }                    return redirect()->route('f-q-a')->with('success', 'F.Q.A saved successfully');        } catch (\Exception $e) {            return redirect()->back()->with('error', 'Failed to delete user: ' . $e->getMessage());        }            }            public function editFQA($id){        $getFQAs = FQA::where('id',$id)->first();        return view('admin.FQA.EditFQA',compact('getFQAs'));    }            public function updateFqa(Request $request,$id){        try{            $validator = Validator::make($request->all(), [                'ques' => 'required',                'ans' => 'required',            ]);                    if ($validator->fails()) {                return back()->withErrors($validator)->withInput();            }            $save = FQA::find($id);            $save->question = $request->ques;            $save->answer = $request->ans;            $save->save();                        if(!$save){                return redirect()->route('f-q-a')->with('success', 'F.Q.A is not updated');            }            return redirect()->route('f-q-a')->with('success', 'F.Q.A updated successfully');        } catch (\Exception $e) {            return redirect()->back()->with('error', 'Failed to delete user: ' . $e->getMessage());        }            }            public function destroyFqa($id){        try {            $fqa = FQA::find($id);            if($fqa){                $fqa->delete();                return response()->json(['status' => 200, 'message'=>'F.Q.A deleted successfully.']);            } else {                return response()->json(['status' => 404, 'message'=>'F.Q.A not found .']);            }        } catch (Exception $exception) {            return response()->json(['status' => 500, 'message'=>'Internal Server Error.']);        }    }            public function viewTutorial(Request $request){        $getTutorial = Tutorial::orderBy('id','desc')->get();        return view('admin.Tutorial.TutorialList',compact('getTutorial'));    }        public function createTutorial(Request $request){        return view('admin.Tutorial.TutorialCreate');    }        public function storeTutorial(Request $request){        try{            $validator = Validator::make($request->all(), [                'title' => 'required',                'details' => 'required',            ]);                    if ($validator->fails()) {                return back()->withErrors($validator)->withInput();            }            $save = new Tutorial;            $save->title = $request->title;            $save->details = $request->details;            if ($request->image) {                $image = $request->image;                $imageName = time() . '_' . $image->getClientOriginalName();                $destinationPath = public_path('/assets/Tutorial');                $image->move($destinationPath, $imageName);                $imageUrl = 'https://admin.famoryapp.com/assets/Tutorial/' . $imageName;                $save->image = $imageUrl;            }            $save->save();                        if(!$save){                return redirect()->route('tutorial')->with('error', 'Tutorial is not saved');            }                    return redirect()->route('tutorial')->with('success', 'Tutorial saved successfully');        } catch (\Exception $e) {            return redirect()->back()->with('error', 'Failed to delete user: ' . $e->getMessage());        }    }        public function editTutorial($id){        $getdata = Tutorial::where('id',$id)->first();        return view('admin.Tutorial.TutorialEdit',compact('getdata'));    }            public function updateTutorial(Request $request,$id){        try{            $validator = Validator::make($request->all(), [                'title' => 'required',                'details' => 'required',            ]);                    if ($validator->fails()) {                return back()->withErrors($validator)->withInput();            }            $save = Tutorial::find($id);            $save->title = $request->title;            $save->details = $request->details;            if ($request->image) {                $image = $request->image;                $imageName = time() . '_' . $image->getClientOriginalName();                $destinationPath = public_path('/assets/Tutorial');                $image->move($destinationPath, $imageName);                $imageUrl = 'https://admin.famoryapp.com/assets/Tutorial/' . $imageName;                $save->image = $imageUrl;            }            $save->save();                        if(!$save){                return redirect()->route('tutorial')->with('error', 'Tutorial is not updated');            }                    return redirect()->route('tutorial')->with('success', 'Tutorial updated successfully');        } catch (\Exception $e) {            return redirect()->back()->with('error', 'Failed to delete user: ' . $e->getMessage());        }    }        public function destroyTutorial($id){        try {            $tutorial = Tutorial::find($id);            if($tutorial){                $tutorial->delete();                return back()->with('success', 'Tutorial deleted successfully');            } else {                return back()->with('error', 'Tutorial not found');            }        } catch (Exception $exception) {            return response()->json(['status' => 500, 'message'=>'Internal Server Error.']);        }    }        public function viewAbout(Request $request){        $getData = AboutUs::orderBy('id','desc')->get();        return view('admin.AboutUs.AboutList',compact('getData'));    }        public function editAbout($id){        $getdata = AboutUs::where('id',$id)->first();        return view('admin.AboutUs.AboutEdit',compact('getdata'));    }        public function updateabout(Request $request,$id){        try{            $validator = Validator::make($request->all(), [                'title' => 'required',                'details' => 'required',            ]);                    if ($validator->fails()) {                return back()->withErrors($validator)->withInput();            }            $save = AboutUs::find($id);            $save->title = $request->title;            $save->details = $request->details;            if ($request->image) {                $image = $request->image;                $imageName = time() . '_' . $image->getClientOriginalName();                $destinationPath = public_path('/assets/AboutUs');                $image->move($destinationPath, $imageName);                $imageUrl = 'https://admin.famoryapp.com/assets/AboutUs/' . $imageName;                $save->image = $imageUrl;            }            $save->save();                        if(!$save){                return redirect()->route('about')->with('error', 'About Us is not updated');            }                    return redirect()->route('about')->with('success', 'About Us updated successfully');        } catch (\Exception $e) {            return redirect()->back()->with('error', 'Failed to delete user: ' . $e->getMessage());        }    }            public function viewAdsPrice(){        $price = AdsPrice::all();        return view('admin.AdsPrice.view',compact('price'));    }        public function editAdsPrice($id){        $getdata = AdsPrice::where('id',$id)->first();        return view('admin.AdsPrice.edit',compact('getdata'));    }        public function updateAdsPrice($id,Request $request){        try{            $validator = Validator::make($request->all(), [                'price' => 'required|numeric',            ]);                    if ($validator->fails()) {                return back()->withErrors($validator)->withInput();            }            $save = AdsPrice::find($id);            $save->price = $request->price;            $save->save();                        if(!$save){                return redirect()->route('ads-price')->with('error', 'Price is not updated');            }            return redirect()->route('ads-price')->with('success', 'Price updated successfully');        } catch (\Exception $e) {            return redirect()->back()->with('error', 'Failed to delete user: ' . $e->getMessage());        }    }        public function viewProduct(){        $datas = Product::orderBy('is_favourite','desc')->orderBy('id', 'desc')->get();        return view('admin.Product.View',compact('datas'));    }        public function createProduct(){        return view('admin.Product.Create');    }            public function storeProduct(Request $request)    {        $validator = Validator::make($request->all(), [            'name' => 'required|max:255',            'price' => 'required|numeric',            'count' => 'required|numeric|not_in:0|regex:/^[1-9][0-9]*$/',            'description' => 'required',            'image' => 'nullable|image|mimes:jpeg,png,jpg,gif,svg|max:2048',            'color' => 'required',            'is_favourite'=>'required',            'reseller_price' => 'required',            'type_of_tag' => 'required',            'tag_purpose' => 'required',                    ],[            'count.required' => 'The count field is required.',            'count.numeric' => 'The count must be a number.',            'count.not_in' => 'The count must be a positive number.',            'count.regex' => 'The count must be a positive number.',        ]);            if ($validator->fails()) {            return back()->withErrors($validator)->withInput();        }               try {            // Create User            $user = new Product;            $user->name = $request->name;            $user->price = $request->price;            $user->count = $request->count;            $user->reseller_price = $request->reseller_price;            $user->type_of_tag = $request->type_of_tag;            $user->tag_purpose = $request->tag_purpose;            $user->color = $request->color;            $user->is_favourite = $request->is_favourite;            $user->description = $request->description;            if ($request->hasFile('image')) {                $res = $this->UploadImage->saveMedia($request->file('image'), Auth::id());                $user->image = $res;            }            $user->save();            return redirect()->route('product')->with('success', 'Famory Tag Created Successfully');        } catch (\Exception $e) {            return response()->json(['message' => $e->getMessage(), 'status' => 'failed', 'data' => []], 500);        }    }        public function editProduct($id){        $data = Product::find($id);        return view('admin.Product.Edit',compact('data'));    }        public function updateProduct($id,Request $request)    {        $validator = Validator::make($request->all(), [            'name' => 'required|max:255',            'price' => 'required|numeric',            'count' => 'required|numeric|not_in:0|regex:/^[1-9][0-9]*$/',            'description' => 'required',            'image' => 'nullable|image|mimes:jpeg,png,jpg,gif,svg|max:2048',            'color' => 'required',            'is_favourite'=> 'required',            'reseller_price' => 'required',            'type_of_tag' => 'required',            'tag_purpose' => 'required',        ],        [            'count.required' => 'The count field is required.',            'count.numeric' => 'The count must be a number.',            'count.not_in' => 'The count must be a positive number.',            'count.regex' => 'The count must be a positive number.',        ]                );            if ($validator->fails()) {            return back()->withErrors($validator)->withInput();        }               try {            // Create User            $user = Product::find($id);            $user->name = $request->name;            $user->price = $request->price;            $user->count = $request->count;            $user->reseller_price = $request->reseller_price;            $user->type_of_tag = $request->type_of_tag;            $user->tag_purpose = $request->tag_purpose;            $user->color = $request->color;            $user->is_favourite = $request->is_favourite;            $user->description = $request->description;            if ($request->hasFile('image')) {                $res = $this->UploadImage->saveMedia($request->file('image'), Auth::id());                $user->image = $res;            }            $user->save();            return redirect()->route('product')->with('success', 'Famory Tag Updated Successfully');        } catch (\Exception $e) {            return response()->json(['message' => $e->getMessage(), 'status' => 'failed', 'data' => []], 500);        }    }        public function destroyProduct($id){        try {            $data = Product::find($id);            if($data){                AddToCart::where('product_id', $id)->delete();                StickerPurchase::where('product_id', $id)->delete();                TransactionHistory::where('product_id', $id)->delete();                $data->delete();                return response()->json(['status' => 200, 'message'=>'Famory Tag deleted successfully.']);            } else {                return response()->json(['status' => 404, 'message'=>'Famory Tag not found .']);            }        } catch (Exception $exception) {            return response()->json(['status' => 500, 'message'=>'Internal Server Error.']);        }    }        public function viewPurchaseHistory(){        // $transactionData = TransactionHistory::where('product_id','!=','null')->with(['product','product.stickerpurchase','user','sticker'])->orderBy('id','Desc')->get();        $transactionData = TransactionHistory::where('product_id', '!=', 'null')                ->whereHas('sticker') // Ensures that only records with related sticker data are retrieved                ->with(['product', 'product.stickerpurchase', 'user', 'sticker'])                ->orderBy('id', 'Desc')                ->get();        return view('admin.purchaseHistory',compact('transactionData'));    }        public function viewTrustedPartners(Request $request){       $getTrustedPartners = TrustedPartners::whereHas('creator', function ($query) {            $query->whereNull('deleted_at');        })->orderBy('featured_partner','desc')->orderBy('id','desc')->get();                return view('admin.TrustedCompany.view',compact('getTrustedPartners'));    }        public function createTrustedCompany(Request $request){       return view('admin.TrustedCompany.create');    }        public function storeTrustedCompany(Request $request){        $validator = Validator::make($request->all(), [            "category" => 'required',            "company_name" => 'required|max:100',            "city"=>'required',            "state"=>'required',            "zip_code"=>'required',                       "phone"=>'required|numeric|digits:10',            "website" => 'required|url',            "logo"=>"required|image|mimes:jpg,png",        ]);                       if ($validator->fails()) {            return back()->withErrors($validator)->withInput();        }                 try {            DB::beginTransaction();            $save = new TrustedPartners();            $save->created_by = Auth::id();            $save->category = $request->category;            $save->company_name = $request->company_name;            $save->city = $request->city;            $save->state = $request->state;            $save->zip_code = $request->zip_code;            $save->phone = $request->phone;            $save->website = $request->website;            $save->lat  = $request->lat;            $save->lng = $request->lng;                        if ($request->logo) {                $image = $request->logo;                $res = $this->UploadImage->saveMedia($request->logo, Auth::id());                $save->logo = $res;            }                                    $save->save();            DB::commit();                        return redirect()->route('trusted-company')->with('success', 'Trusted company add Successfully');                    } catch (\Exception $e) {            DB::rollBack();            return response()->json(['message' => $e->getMessage(), 'status' => 'failed'], 500);        }    }        public function destroyTrustedCompany(Request $request){        try {            $id = $request->id;            if($id){                TrustedPartners::whereIn('id',$id)->delete();                SubscribedPartner::whereIn('trusted_partner_id',$id)->delete();                return response()->json(['status' => 200, 'message'=>'Trusted company deleted successfully.']);                            }            return response()->json(['status' => 404, 'message'=>'Trusted company not found .']);        } catch (Exception $exception) {            return response()->json(['status' => 500, 'message'=>'Internal Server Error.']);        }    }        public function editTrustedCompany($id){        $data = TrustedPartners::find($id);        return view('admin.TrustedCompany.edit',compact('data'));    }        public function updateTrustedCompany(Request $request,$id){            $validator = Validator::make($request->all(), [            "category" => 'required',            "company_name" => 'required|max:100',            "city"=>'required',            "state"=>'required',            "zip_code"=>'required',                        "phone"=>'required|numeric|digits:10',            "website" => 'required|url',            "logo"=>"image|mimes:jpg,png",                    ]);            if ($validator->fails()) {            return back()->withErrors($validator)->withInput();        }                 try {            DB::beginTransaction();            $save = TrustedPartners::find($id);            $save->created_by = Auth::id();            $save->category = $request->category;            $save->company_name = $request->company_name;            $save->city = $request->city;            $save->state = $request->state;            $save->zip_code = $request->zip_code;            $save->phone = $request->phone;            $save->website = $request->website;            $save->lat  = $request->lat ;            $save->lng = $request->lng;                        if ($request->logo) {                $image = $request->logo;                $res = $this->UploadImage->saveMedia($request->logo, Auth::id());                $save->logo = $res;            }                                    $save->save();            DB::commit();                        return redirect()->route('trusted-company')->with('success', 'Trusted company update Successfully');                    } catch (\Exception $e) {            DB::rollBack();            return response()->json(['message' => $e->getMessage(), 'status' => 'failed'], 500);        }     }            public function cancelSubscription(Request $request, $id){        try{            $prtnr = TrustedPartners::find($id);                      if($prtnr->cancel_status == 0 && $prtnr->featured_partner == 1){                                TrustedPartners::where('id', $id)->update(['cancel_status' => '1','cancel_at' =>date('Y-m-d h:i:s') ]);                return response()->json(['status'=> 200,'message'=>"Your Cancellation Request Saved Successfully"]);            }else{                return response()->json(['status'=>200,'message'=>"Your Subscription Cancellation Request is Pending"]);               }                    } catch (Exception $exception) {            return response()->json(['status' => 500, 'message'=>'Internal Server Error.']);        }    }        public function viewfeaturedCompanyPayment(){        $datas = FeaturedCompanyPrice::orderBy('id','desc')->get();        return view('admin.FeaturedCompanyPayment.view',compact('datas'));    }            public function createfeaturedCompanyPayment(Request $request){       return view('admin.FeaturedCompanyPayment.create');    }        public function storefeaturedCompany(Request $request){        $validator = Validator::make($request->all(), [            "month" => 'required',            "price" => 'required|numeric',        ]);            if ($validator->fails()) {            return back()->withErrors($validator)->withInput();        }                 try {            DB::beginTransaction();            $save = new FeaturedCompanyPrice();            $save->month = $request->month;            $save->price = $request->price;                        $save->save();            DB::commit();                        return redirect()->route('featured-company-payment')->with('success', 'featured price add Successfully');                    } catch (\Exception $e) {            DB::rollBack();            return response()->json(['message' => $e->getMessage(), 'status' => 'failed'], 500);        }    }        public function editfeaturedCompany($id){        $data = FeaturedCompanyPrice::find($id);        return view('admin.FeaturedCompanyPayment.edit',compact('data'));    }        public function updatefeaturedCompany(Request $request,$id){        $validator = Validator::make($request->all(), [            "month" => 'required',            "price" => 'required|numeric',        ]);            if ($validator->fails()) {            return back()->withErrors($validator)->withInput();        }                 try {            DB::beginTransaction();            $save = FeaturedCompanyPrice::find($id);            $save->month = $request->month;            $save->price = $request->price;                        $save->save();            DB::commit();                        return redirect()->route('featured-company-payment')->with('success', 'featured price update Successfully');                    } catch (\Exception $e) {            DB::rollBack();            return response()->json(['message' => $e->getMessage(), 'status' => 'failed'], 500);        }    }            public function destroyfeaturedCompany(Request $request,$id){        try {            $data = FeaturedCompanyPrice::find($id);            if($data){                $data->delete();                return response()->json(['status' => 200, 'message'=>'Data deleted successfully.']);            } else {                return response()->json(['status' => 404, 'message'=>'Data not found .']);            }        } catch (Exception $exception) {            return response()->json(['status' => 500, 'message'=>'Internal Server Error.']);        }    }        public function viewSubscriptionSetting(Request $request){        $datas = SubscriptionSetting::orderBy('id','DESC')->paginate(10);        return view('admin.SubscriptionSetting.view',compact('datas'));    }        public function createSubscriptionSetting(Request $request){       return view('admin.SubscriptionSetting.create');    }            public function storeSubscriptionSetting(Request $request){        $validator = Validator::make($request->all(), [            "plans" => 'required',            "benefits" => 'required',            "plan_id_ios" => 'required',            "plan_id_android" => 'required',        ]);            if ($validator->fails()) {            return back()->withErrors($validator)->withInput();        }                 try {            DB::beginTransaction();            $save = new SubscriptionSetting();            $save->plan_id_android = $request->plan_id_android;            $save->plan_id_ios = $request->plan_id_ios;            $save->plans = $request->plans;            $save->benefits = $request->benefits;            $save->title = $request->title;            $save->save();            DB::commit();                        return redirect()->route('subscription-setting')->with('success', 'Subscription data add Successfully');                    } catch (\Exception $e) {            DB::rollBack();            return response()->json(['message' => $e->getMessage(), 'status' => 'failed'], 500);        }    }            public function editSubscriptionSetting($id){        $data = SubscriptionSetting::find($id);        return view('admin.SubscriptionSetting.edit',compact('data'));    }        public function updateSubscriptionSetting(Request $request,$id){        $validator = Validator::make($request->all(), [            "plans" => 'required',            "benefits" => 'required',            "plan_id_ios" => 'required',            "plan_id_android" => 'required',        ]);            if ($validator->fails()) {            return back()->withErrors($validator)->withInput();        }                 try {            DB::beginTransaction();            $save = SubscriptionSetting::find($id);            $save->plan_id_android = $request->plan_id_android;            $save->plan_id_ios = $request->plan_id_ios;            $save->plans = $request->plans;            $save->benefits = $request->benefits;            $save->title = $request->title;            $save->save();            DB::commit();                        return redirect()->route('subscription-setting')->with('success', 'Subscription data update Successfully');                                } catch (\Exception $e) {            DB::rollBack();            return response()->json(['message' => $e->getMessage(), 'status' => 'failed'], 500);        }    }            public function destroySubscriptionSetting(Request $request,$id){        try {            $data = SubscriptionSetting::find($id);            if($data){                $data->delete();                return response()->json(['status' => 200, 'message'=>'Data deleted successfully.']);            } else {                return response()->json(['status' => 404, 'message'=>'Data not found .']);            }        } catch (Exception $exception) {            return response()->json(['status' => 500, 'message'=>'Internal Server Error.']);        }    }            public function getFamoryTagByUser(Request $request){        $data = FamilyTagId::where('user_id',$request->user_id)->orderBy('updated_at','desc')->paginate(10);        return response()->json(['status' => 200, 'message'=>'Get data successfully.','data'=>$data]);    }            public function viewOderDetail($id){        $data = StickerPurchase::where('id',$id)->with('product','user','address')->first();        return view('admin.viewOrderDetail',compact('data'));    }        public function updateOrderStaus(Request $request,$id){                 $validator = Validator::make($request->all(), [            "order_status" => 'required',            "shipTrackingId"=> "required_if:order_status,order sent"        ]);            if ($validator->fails()) {            return back()->with('error', 'Ship tracking id is required');            // return back()->withErrors($validator)->withInput();        }                                        try {            $data = StickerPurchase::find($id);            if($request->order_status == 'order received'){            // send email                 $datas = StickerPurchase::where('id',$id)->with('product','user','address')->first();                $userdata = User::where('id',$data->user_id)->first();                if($userdata){                    Mail::to($userdata->email)->send(new SendMailOrderReceived($datas));                            }            } else if ($request->order_status == 'order sent'){                $shipTrackingId = $request->shipTrackingId;                $datas = StickerPurchase::where('id',$id)->with('product','user','address')->first();                $userdata = User::where('id',$data->user_id)->first();                if($userdata){                    Mail::to($userdata->email)->send(new SendMailOrderSend($datas,$shipTrackingId));                }            }                                    $data->order_status = $request->order_status;            if($request->order_status == 'order sent'){                $data->shipping_tracking_number = $request->shipTrackingId;            }            $data->save();            return redirect()->route('purchase-history')->with('success', 'Order Status updated Successfully');        } catch (Exception $exception) {            return response()->json(['status' => 500, 'message'=>'Internal Server Error.']);        }    }                //  public function getFamoryTagPost($id){    //     $posts = Post::where('tag_id',$id)->orderBy('id','DESC')->paginate(12);    //     $user = User::where('id',$id)->first();    //     return view('admin.famoryTagPost',compact('posts','user'));    // }        public function getFamoryTagPost($id){        $posts = Post::where('tag_id',$id)->orderBy('id','DESC')->paginate(12);        $tag_id = $id;        return view('admin.famoryTagPost',compact('posts','tag_id'));    }        public function getAllTagUser(Request $request, $id)	{		$user = User::select('first_name', 'last_name')->find($id);		if (!$user) {			return redirect()->back()->with('error', 'User not found.');		}		$tags = FamilyTagId::where('user_id', $id)->orderBy('updated_at', 'desc')->get();		return view('admin.AllTagUser', compact('tags', 'user'));	}				public function getUserDetailsWithOrders($id){	   // $user = User::find($id);	    $stickerPurchase = StickerPurchase::with('products','user')->where('user_id',$id)->get();	    return view('admin.getUserDetailsWithOrder',compact('stickerPurchase'));	}			public function getAllAds(){	    $ads = Advertisement::whereHas('user',function ($query) {                    $query->whereNull('deleted_at');                })->orderBy('id','desc')->get();	    return view('admin.Ads.view',compact('ads'));	}		public function updateAdStatus($id){	    $ad = Advertisement::find($id);        if($ad){            $ad->is_national = !$ad->is_national;            $ad->save();            return response()->json(['status' => 200, 'message'=>'Ad Updated Successfully.']);        } else {            return response()->json(['status' => 404, 'message'=>'Ad Not Found']);        }	   // echo $ad->is_national; 	}    public function freeSubscription(Request $request,$id){        $validator = Validator::make($request->all(), [            "noOfDays"=>"required",            "user_id"=>"required"        ]);            if ($validator->fails()) {            return back()->withErrors($validator)->withInput();        }         try{            // $today = date('Y-m-d');            // $expirationDate = date('Y-m-d', strtotime('+'.$request->noOfDays.' days', strtotime($today)));                        $save = new Subscription();            $save->user_id = $request->user_id;            $save->subscription = 'free';            $save->receipt = 'free';            $save->platform = 'web';            $save->expiry_date = $request->noOfDays;                        $save->save();                         return response()->json(['status' => 200, 'message'=>'Free Subscription Added Successfully']);                    } catch (Exception $exception) {            return response()->json(['status' => 500, 'message'=>'Internal Server Error.']);        }    }        public function cancelFreeSubscription(Request $request,$id){        try{            $getData = Subscription::where('id',$id)->first();            if(!$getData){                return response()->json(['status' => 404, 'message'=>'Subscription not cancel .']);            }            $getData->delete();            return response()->json(['status' => 200, 'message'=>'Subscription canceled successfully.']);        } catch (Exception $exception) {            return response()->json(['status' => 500, 'message'=>'Internal Server Error.']);        }    }        public function deceasedReports()    {        $datas = [];        $now = Carbon::now();                $reports = UserLiveStatus::with([            'user' => function ($query) {                $query->whereNull('deleted_at')->select('id', 'first_name', 'last_name', 'email');            },            'deceasedBy' => function ($query) {                $query->whereNull('deleted_at')->select('id', 'first_name', 'last_name', 'email');            }        ])->get();            foreach ($reports as $report) {            $addTime = $report->created_at->copy()->addHours(72);            if ($now->greaterThanOrEqualTo($addTime)) {                $checkUserLive = UserLiveStatus::where('user_id', $report->user_id)                    ->where('is_alive', 1)                    ->orderBy('created_at', 'desc')                    ->first();                    if ($checkUserLive) {                    $deceasedReports = UserLiveStatus::select('user_id', 'deceased_by', \DB::raw('count(*) as count'))                        ->with(['user', 'deceasedBy'])                        ->where('user_id', $report->user_id)                        ->where('is_alive', 0)                        ->groupBy('user_id', 'deceased_by')                        ->get();                        foreach ($deceasedReports as $deceasedReport) {                        $uniqueKey = $deceasedReport->user_id . '-' . $deceasedReport->deceased_by;                                                // Ensure the combination of user_id and deceased_by is unique                        if (!isset($uniqueEntries[$uniqueKey])) {                            $datas[] = [                                'user' => $deceasedReport->user,                                'deceased_by' => $deceasedReport->deceasedBy,                                'count' => $deceasedReport->count,                            ];                            $uniqueEntries[$uniqueKey] = true; // Mark this combination as processed                        }                    }                }            }        }            return view('admin.deceasedReport', compact('datas'));    }    public function deceasedReportDelete(Request $request)    {        try {            foreach ($request->deleteData as $data) {                // Ensure $data is an array and contains the expected keys                if (is_array($data) && isset($data['user_id']) && isset($data['deceased_by_id'])) {                    UserLiveStatus::where([                        'user_id' => $data['user_id'],                        'deceased_by' => $data['deceased_by_id']                    ])->delete();                }            }            return response()->json(['status' => 200, 'message' => 'Records deleted successfully.']);                     } catch (Exception $exception) {            return response()->json(['status' => 500, 'message' => 'Internal Server Error.']);        }    }    //custom notification    public function customNotification(){        $users = User::where('role_id','<>',1)->get();        return view('admin.customNotification',compact('users'));    }    public function sendCustomNotification(Request $request){        $validator = Validator::make($request->all(), [            "chosenOption"=>"required",            "title"=>"required",            "message"=>"required",        ],[            "chosenOption.required"=>"Please select an option."            ]);            if ($validator->fails()) {            return back()->withErrors($validator)->withInput();        }         try{            $chosenOption = $request->chosenOption;            $title = $request->title;            $message = $request->message;            $sender = Auth::user();                        if($chosenOption == "all"){                $userIds = User::where('role_id','<>',1)->pluck('id')->toArray();            }elseif($chosenOption == "individual"){                $userIds = $request->ids;            }                        foreach($userIds as $userId){                $this->notifyMessage($sender, $userId, null, "custom_notification", null, null,$title,$message);            }                        return redirect()->route('customNotification')->with('success', 'Notification Send Successfully');                    } catch (Exception $exception) {            return response()->json(['status' => 500, 'message'=>'Internal Server Error.']);        }    }        public function banUser(Request $request)    {        $validator = Validator::make($request->all(), [            'id' => 'required',        ]);            if ($validator->fails()) {            return response()->json(['message' => 'Validation failed', 'status' => 'failed'], 422);        }            try {            $user = User::find($request->id);            if ($user) {                $user->ban_user = '1';                $user->save();                    return response()->json(['message' => 'User banned successfully', 'status' => 'success'], 200);            } else {                return response()->json(['message' => 'User not found', 'status' => 'failed'], 404);            }        } catch (\Exception $e) {            return response()->json(['message' => $e->getMessage(), 'status' => 'failed'], 500);        }    }             public function freeAds(Request $request,$id){        $validator = Validator::make($request->all(), [            "noOfDays"=>"required",            "ads_id"=>"required"        ]);            if ($validator->fails()) {            return back()->withErrors($validator)->withInput();        }         try{                        $save = Advertisement::find($request->ads_id);            $save->free_expiration_date = $request->noOfDays;            $save->show_ads_status = 1;            $save->save();                        if(!$save){              return response()->json(['status' => 422, 'message'=>'Please try again Data was not saved successfully']);              }                        return response()->json(['status' => 200, 'message'=>'Data saved successfully']);                    } catch (Exception $exception) {            return response()->json(['status' => 500, 'message'=>'Internal Server Error.']);        }    }            public function cancelFreeAds(Request $request, $id)    {        try {            $getData = Advertisement::find($id);            if (!$getData) {                return response()->json(['status' => 404, 'message' => 'Ad not found.']);            }                $getData->free_expiration_date = null;            $getData->show_ads_status = 0;            $getData->save();                return response()->json(['status' => 200, 'message' => 'Ad canceled successfully.']);        } catch (\Exception $exception) {            return response()->json(['status' => 500, 'message' => 'Internal Server Error.'], 500);        }    }        public function viewPostDetails(Request $request,$id){        $post = Post::where('id', $id)                ->whereHas('scheduling_post', function ($query) {                    $query->where('is_post', 1);                })                ->whereHas('user',function ($query) {                    $query->whereNull('deleted_at');                })->first();        return view('admin.postDetails', compact("post"));   }       public function deleteSelectedContact(Request $request)    {        $ids = $request->input('ids');            if ($ids && is_array($ids)) {            Contact::whereIn('id', $ids)->delete();            return response()->json(['success' => true, 'message' => 'Selected contacts deleted successfully.']);        }        return response()->json(['success' => false, 'message' => 'No contacts selected.']);    }         public function famoryTagDeleteSelected(Request $request)    {        $ids = $request->input('ids');            if ($ids && is_array($ids)) {            AddToCart::whereIn('product_id', $ids)->delete();            StickerPurchase::whereIn('product_id', $ids)->delete();            TransactionHistory::whereIn('product_id', $ids)->delete();            Product::whereIn('id', $ids)->delete();            return response()->json(['success' => true, 'message' => 'Selected famory tags deleted successfully.']);        }        return response()->json(['success' => false, 'message' => 'No tag selected.']);    }            public function openWorldPostHidden(Request $request){        try {            $data = SchedulingPost::where('post_id',$request->id)->first();            if($data){                $data->is_post = 0;                $data->save();                return response()->json(['success' => true, 'message'=>'Post removed successfully.']);            } else {                return response()->json(['success' => false, 'message'=>'Post not found .']);            }        } catch (Exception $exception) {            return response()->json(['success' => false, 'message'=>'Internal Server Error.']);        }    }}