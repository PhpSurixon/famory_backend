<?phpnamespace App\Http\Middleware;use Closure;use Exception;use Illuminate\Http\Request;// use App\Trait\FormatResponseTrait;use Tymon\JWTAuth\Facades\JWTAuth;use Symfony\Component\HttpFoundation\Response;use Tymon\JWTAuth\Http\Middleware\BaseMiddleware;use App\Models\User;use Illuminate\Support\Facades\Auth;class JWTMiddleware{    // use FormatResponseTrait;    /**     * Handle an incoming request.     *     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next     */    // public function handle(Request $request, Closure $next): Response    // {    //     return $next($request);    // }    public function handle($request, Closure $next)    {        try {            $user = JWTAuth::parseToken()->authenticate();        } catch (Exception $e) {            if ($e instanceof \Tymon\JWTAuth\Exceptions\TokenInvalidException){                // return $this->errorResponse('Token is invalid', 'invalid_token', Response::HTTP_UNAUTHORIZED, new \stdClass());                return response()->json(["message" => "Token is invalid", "status" => "Failed",'error_type' => 'unauthorized', "data" => []], 400);            }else if ($e instanceof \Tymon\JWTAuth\Exceptions\TokenExpiredException){                 return response()->json(["message" => 'Token is expired', "status" => "Failed", "data" => []], 400);                // return $this->errorResponse('Token is expired', 'expired_token', Response::HTTP_UNAUTHORIZED, new \stdClass());            }else{                 return response()->json(["message" => 'Token not found', "status" => "Failed", "data" => []], 400);                // return $this->errorResponse('Token not found', 'ERROR', Response::HTTP_UNAUTHORIZED, new \stdClass());            }        }                 if (!$user || !User::find($user->id)) {            return response()->json(["message" => 'User not found or has been deleted.', "status" => "Failed",'error_type' => 'unauthorized', "data" => []], 401);        }        // Set the authenticated user in the request        Auth::setUser($user);                        return $next($request);    }}