<?phpnamespace App\Http\Middleware;use Closure;use Illuminate\Support\Facades\Auth;class IsAdvertiser{    /**     * Handle an incoming request.     *     * @param  \Illuminate\Http\Request  $request     * @param  \Closure  $next     * @return mixed     */    // public function handle($request, Closure $next)    // {    //     // if (Auth::check() && Auth::user()->role_id == '3') {    //     //     return $next($request);    //     // }    //     // else    //     // {    //     //     \Log::info('Redirecting user with role_id ' . Auth::user()->role_id . ' to /dashboard');    //     //     return redirect('/dashboard');    //     // }            //     if (Auth::check()) {    //         if (Auth::user()->role_id == '3' ||  Auth::user()->role_id == '2') {    //             return $next($request);    //         }    //         // Handle role-based redirection    //         return redirect()->route('dashboard');    //     }    //     if ($request->getHost() == 'admin.famoryapp.com') {    //         return redirect()->route('admin.login');    //     }            //     // Handle domain-based redirection if not authenticated    //     if ($request->getHost() == 'partners.famoryapp.com') {    //         return redirect()->route('login');    //     }    // }       public function handle($request, Closure $next){    // Check if the user is authenticated    if (Auth::check()) {        // Check if the user has the required role        if (Auth::user()->role_id == '3' || Auth::user()->role_id == '2') {            return $next($request); // Allow access        }        // Redirect to the dashboard if the user is authenticated but does not have the right role        return redirect()->route('dashboard');    }    // Handle domain-based redirection if not authenticated    if ($request->getHost() == 'admin.famoryapp.com') {        return redirect()->route('admin.login'); // Redirect to admin login    }    if ($request->getHost() == 'partners.famoryapp.com') {        return redirect()->route('login'); // Redirect to user login    }    // Optionally, you can handle other cases or return a default response    return redirect()->route('login'); // Fallback for any other hosts}    }